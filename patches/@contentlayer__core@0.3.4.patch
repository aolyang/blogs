diff --git a/dist/generation/generate-dotpkg.js b/dist/generation/generate-dotpkg.js
index 0e9f9a2bdfaba1f8547a5f3739ba1c12e50a9070..3626f980592a2dabaa431ec978fd4fc7e3a8c677 100644
--- a/dist/generation/generate-dotpkg.js
+++ b/dist/generation/generate-dotpkg.js
@@ -8,6 +8,7 @@ import { SuccessCallbackError } from '../errors.js';
 import * as esbuild from '../getConfig/esbuild.js';
 import { autogeneratedNote, getDataVariableName } from './common.js';
 import { renderTypes } from './generate-types.js';
+import * as URL from "url"
 export const logGenerateInfo = (info) => T.log(`Generated ${info.documentCount} documents in .contentlayer`);
 export const generateDotpkg = ({ config, verbose, }) => pipe(generateDotpkgStream({ config, verbose, isDev: false }), S.take(1), S.runCollect, T.map(Chunk.unsafeHead), T.rightOrFail, OT.withSpan('@contentlayer/core/generation:generateDotpkg', { attributes: { verbose } }));
 // TODO make sure unused old generated files are removed
@@ -28,7 +29,13 @@ export const generateDotpkgStream = ({ config, verbose, isDev, }) => {
 const successCallback = (onSuccess) => {
     if (!onSuccess)
         return T.unit;
-    return pipe(getCwd, T.map((cwd) => ArtifactsDir.getDirPath({ cwd })), T.tapSync((path) => console.log('successCallback', path)), T.chain((generatedPkgPath) => T.tryCatchPromise(() => onSuccess(() => import(filePathJoin(generatedPkgPath, 'generated', 'index.mjs'))), (error) => new SuccessCallbackError({ error }))), OT.withSpan('@contentlayer/core/generation:successCallback'));
+    return pipe(getCwd, T.map((cwd) => ArtifactsDir.getDirPath({ cwd })), T.tapSync((path) => console.log('successCallback', path)),
+        T.chain((generatedPkgPath) => T.tryCatchPromise(() => onSuccess(() => import(
+            URL.pathToFileURL(
+                filePathJoin(generatedPkgPath, 'generated', 'index.mjs')))
+            )
+        ,
+        (error) => new SuccessCallbackError({ error }))), OT.withSpan('@contentlayer/core/generation:successCallback'));
 };
 const writeFilesForCache = ({ config, cache, schemaDef, targetPath, generationOptions, writtenFilesCache, isDev, }) => pipe(T.gen(function* ($) {
     const withPrefix = (...path_) => filePathJoin(targetPath, ...path_);